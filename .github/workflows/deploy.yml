name: Enterprise CI/CD Pipeline

on:
  # Build automático para qualquer push
  push:
    branches: [main]
  
  # Deploy manual via workflow_dispatch
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch para deploy'
        required: true
        default: 'main'
        type: string
      environment:
        description: 'Ambiente de destino'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - qa
      force_deploy:
        description: 'Forçar deploy mesmo se imagem não existir'
        required: false
        default: false
        type: boolean

env:
  KUBECONFIG: /home/neto/.kube/config_cluster_local
  REGISTRY: netinhos89
  IMAGE_NAME: local-app

jobs:
  # Job para build automático (sempre executa no push)
  build:
    if: github.event_name == 'push'
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set branch tag
        id: branch
        run: |
          # Converter nome da branch para tag válida (como na sua empresa)
          BRANCH_TAG=$(echo "${{ github.ref_name }}" | tr '/' '-' | tr '_' '-' | tr '[:upper:]' '[:lower:]')
          echo "tag=$BRANCH_TAG" >> $GITHUB_OUTPUT
          echo "Branch tag: $BRANCH_TAG"
      
      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      
      - name: Build and Push Image
        run: |
          echo "🔨 Building image for branch: ${{ steps.branch.outputs.tag }}"
          
          # Build da imagem com tag da branch
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.branch.outputs.tag }} .
          
          # Push para Docker Hub
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.branch.outputs.tag }}
          
          echo "✅ Image pushed: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.branch.outputs.tag }}"
      
      - name: Build Summary
        run: |
          echo "## 🚀 Build Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** ${{ steps.branch.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.branch.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Available for deployment" >> $GITHUB_STEP_SUMMARY

  # Job para deploy manual
  deploy:
    if: github.event_name == 'workflow_dispatch'
    runs-on: self-hosted
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate inputs
        id: validate
        run: |
          echo "🔍 Validating deployment inputs..."
          echo "Branch: ${{ github.event.inputs.branch }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Force Deploy: ${{ github.event.inputs.force_deploy }}"
          
          # Converter branch para tag
          BRANCH_TAG=$(echo "${{ github.event.inputs.branch }}" | tr '/' '-' | tr '_' '-' | tr '[:upper:]' '[:lower:]')
          echo "tag=$BRANCH_TAG" >> $GITHUB_OUTPUT
          
          # Definir namespace baseado no ambiente
          case "${{ github.event.inputs.environment }}" in
            "dev")
              NAMESPACE="local-app-dev"
              ;;
            "qa")
              NAMESPACE="local-app-qa"
              ;;
            "staging")
              NAMESPACE="local-app-staging"
              ;;
            *)
              echo "❌ Ambiente inválido: ${{ github.event.inputs.environment }}"
              exit 1
              ;;
          esac
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT
          
          echo "✅ Validation completed"
          echo "- Image tag: $BRANCH_TAG"
          echo "- Target namespace: $NAMESPACE"
      
      - name: Check if image exists
        if: github.event.inputs.force_deploy != 'true'
        run: |
          echo "🔍 Checking if image exists in Docker Hub..."
          
          # Verificar se a imagem existe no Docker Hub
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.validate.outputs.tag }} > /dev/null 2>&1; then
            echo "✅ Image found: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.validate.outputs.tag }}"
          else
            echo "❌ Image not found: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.validate.outputs.tag }}"
            echo "💡 Tip: Run a build for branch '${{ github.event.inputs.branch }}' first"
            exit 1
          fi
      
      - name: Deploy to Environment
        run: |
          echo "🚀 Deploying to ${{ github.event.inputs.environment }} environment..."
          
          # Criar namespace se não existir
          kubectl create namespace ${{ steps.validate.outputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -
          
          # Preparar manifests para o ambiente específico
          sed 's/namespace: local-app/namespace: ${{ steps.validate.outputs.namespace }}/g' k8s/app.yaml > /tmp/deploy-${{ github.event.inputs.environment }}.yaml
          sed -i 's/name: local-app/name: local-app-${{ github.event.inputs.environment }}/g' /tmp/deploy-${{ github.event.inputs.environment }}.yaml
          sed -i 's/local-app-service/local-app-${{ github.event.inputs.environment }}-service/g' /tmp/deploy-${{ github.event.inputs.environment }}.yaml
          
          # Aplicar manifests
          kubectl apply -f /tmp/deploy-${{ github.event.inputs.environment }}.yaml
          
          # Aguardar deployment estar ready
          kubectl wait --for=condition=Available deployment/local-app-${{ github.event.inputs.environment }} -n ${{ steps.validate.outputs.namespace }} --timeout=60s || true
          
          # Atualizar imagem do deployment
          kubectl set image deployment/local-app-${{ github.event.inputs.environment }} app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.validate.outputs.tag }} -n ${{ steps.validate.outputs.namespace }}
          
          # Aguardar rollout
          kubectl rollout status deployment/local-app-${{ github.event.inputs.environment }} -n ${{ steps.validate.outputs.namespace }} --timeout=300s
          
          echo "✅ Deployment completed successfully!"
      
      - name: Verify Deployment
        run: |
          echo "🔍 Verifying deployment in ${{ github.event.inputs.environment }}..."
          
          # Status dos pods
          kubectl get pods -n ${{ steps.validate.outputs.namespace }} -l app=local-app
          
          # Status do service
          kubectl get service -n ${{ steps.validate.outputs.namespace }}
          
          # Logs recentes
          echo "📋 Recent application logs:"
          kubectl logs -n ${{ steps.validate.outputs.namespace }} -l app=local-app --tail=10 || echo "No logs available yet"
      
      - name: Deployment Summary
        run: |
          echo "## 🎯 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.event.inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespace:** ${{ steps.validate.outputs.namespace }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Deployed successfully" >> $GITHUB_STEP_SUMMARY
          
          # URL para acessar (se tiver ingress configurado)
          echo "- **Access URL:** http://local-app-${{ github.event.inputs.environment }}.local" >> $GITHUB_STEP_SUMMARY